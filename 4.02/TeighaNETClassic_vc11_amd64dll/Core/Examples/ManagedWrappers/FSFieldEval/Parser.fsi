// Signature file for parser generated by fsyacc
module Parser
open Ast
type token = 
  | EOF
  | LPAREN
  | RPAREN
  | LBRACKET
  | RBRACKET
  | COMMA
  | DOT
  | PI
  | E
  | SIN
  | COS
  | TAN
  | ASIN
  | ACOS
  | ATAN
  | LOG
  | LN
  | EXP
  | SQR
  | SQRT
  | R2D
  | D2R
  | ABS
  | ROUND
  | TRUNC
  | DIST
  | ILL
  | NOR
  | VEC
  | VEC1
  | COLON
  | ASTERISK
  | SLASH
  | CARET
  | PLUS
  | DASH
  | TABLE of (int64)
  | LITERAL of (string)
  | FLOAT of (float)
type tokenId = 
    | TOKEN_EOF
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_LBRACKET
    | TOKEN_RBRACKET
    | TOKEN_COMMA
    | TOKEN_DOT
    | TOKEN_PI
    | TOKEN_E
    | TOKEN_SIN
    | TOKEN_COS
    | TOKEN_TAN
    | TOKEN_ASIN
    | TOKEN_ACOS
    | TOKEN_ATAN
    | TOKEN_LOG
    | TOKEN_LN
    | TOKEN_EXP
    | TOKEN_SQR
    | TOKEN_SQRT
    | TOKEN_R2D
    | TOKEN_D2R
    | TOKEN_ABS
    | TOKEN_ROUND
    | TOKEN_TRUNC
    | TOKEN_DIST
    | TOKEN_ILL
    | TOKEN_NOR
    | TOKEN_VEC
    | TOKEN_VEC1
    | TOKEN_COLON
    | TOKEN_ASTERISK
    | TOKEN_SLASH
    | TOKEN_CARET
    | TOKEN_PLUS
    | TOKEN_DASH
    | TOKEN_TABLE
    | TOKEN_LITERAL
    | TOKEN_FLOAT
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startMain
    | NONTERM_Main
    | NONTERM_Expr
/// This function maps integers indexes to symbolic token ids
val tagOfToken: token -> int

/// This function maps integers indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val Main : (Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> (expr) 
